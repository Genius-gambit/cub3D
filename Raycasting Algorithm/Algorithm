My Approach for the algorithm some references I gathered from the guideline of cub3D and some references from the videos of raycasting. 

Angles defined in the algorithm are mostly in degrees, some are mentioned in radians.

Basic Raycasting:
Let's talk about the field of view for the player. 
For my raycasting I took the field of view as 70 degree which will be 35 degree from the left and the 35 degree to the right.

Based on the project cub3D:
If the player is facing North: Angle of the player will be 270 degree.
If the player is facing South: Angle of the player will be 90 degree.
If the player is facing East: Angle of the player will be 180 degree.
If the player is facing West: Angle of the player will be 0 degree.

Rotation of the player:
Given the angle of the player, in order to rotate the player towards the left, we can subtract with any constant degree.
In my case, I deduct the angle of the player with 0.1(since we're working with radian, so in degree the constant will be 5.73 degrees)
On the other hand if we rotate towards right, we can add the angle with constant 0.1 (the same thing).

Observing the figure of polar coordinates, we can slice the angles in four quadrants.
First quadrant: 0 <= angle < 90
Second quadrant: 90 <= angle < 180
Third quadrant: 180 <= angle < 270
Fourth quadrant: 270 <= angle < 360

In case, if angle is less than 0, this indicates that the angle lies in the fourth quadrant, so we can add the resulted angle with 360. Vice versa, if the angle is greater than 360, this indicates that the angle lies in the first quadrant, so we can deduct the resulted angle with 360.

Movements:
In case of movements, we can calculate the change in value of x coordinate and y coordinate. Since we have the angle of the player.
Forward Movement:
To check the change in x-coordinate: cos(angle of the player) * distance.
To check the change in y-coordinate: sin(angle of the player) * distance.
Why?
> In account if we implement Euler's theorem which states that how we can convert cartesian coordinates to polar coordinates. the change will give you the result with the help of polar coordinates.
Then we can update the player's position by adding the position of the player with the change in both the coordinates.

Backward Movement:
Same as the previous step except instead of adding the change in both the coordinates, we deduct it.

Right Movement:
This time we will work with angles
To check the change in x-coordinate: cos(angle of the player + 90) * distance.
To check the change in y-coordinate: sin(angle of the player + 90) * distance.
Update the player's position by adding the position of the player with the change in both the coordinates.

Left Movement:
Same as the Right Movement except instead of adding the change in both the coordinates, we deduct it.

Note: It's upto you how much distance you want for your player to cover.

Notes:
Convert degree to radian: angle * 180 / PI.
Convert radian to degree: angle * PI / 180.

Rays:
Since I had the field of view of 70 degree. I created an array of structure with size of 70 which can hold the information of each ray:
1. X-coordinate.
2. Y-coordinate.
3. Angle of the ray.
4. Distance of the ray.

Wall Collision:
In a way to avoid wall collision, what I did was I have placed four arcs around my player which can detect a wall, Just like the rays, except this time we can have a specific distance, for example for forward wall collision for one arc we can calculate 7 coordinates. We can have an initial angle about angle of the player - 35 degrees. Based on the angle we can have coordinates:
w_x = x-coordinate of the wall collision, w_y = y-coordinate of the wall collision
w_x = x_coordinate of the player + cos(angle of the wall collision) * constant, w_y = y_coordinate of the player + sin(angle of the wall collision) * constant; I gave constant as 0.125. Then we can increment the angle of the wall collision by 10 degrees(in radian- 10 * PI / 180) and have iteration in 7 loops. Have wall collision flag if any of the coordinates hits the wall.
We can do the same for the other directions as well.
For the right, angle of the wall collision(initial) = PI / 2 + angle of the player - 35 degrees.
For the left, angle of the wall collision(initial) = (3 * PI / 2) + angle of the player - 35 degrees.
For backward, angle of the wall collision(initial) = angle of the player - 35 degrees - PI.

Edge cases:
I hard coded the edge cases for all the four criterias:

The first index of the ray will have the angle = angle of the player - 35.

Calculation for the rays:
We can create a while loop for the ray to hit the wall:
while (!wall)
{
	ray_x_coordinate += (cos(angle of the ray) * distance);
	ray_y_coordinate += (sin(angle of the ray) * distance);
	if (map[ray_y_coordinate][ray_x_coordinate] == '1')
		wall = 1;
	else if edge cases()
}

Now we have two coordinates, so we can find the distance between one ray and the position of the player:
Distance Formula:
	sq_root(sq(x2 - x1)^2 + sq(y2 - y1)^2).
Now that we have the distance the important thing to note is that this distance is the not correct implication to get the wall height.
When the ray hits the wall and player is facing 90 degree we get a right angle triangle and the distance of the ray is the hypotenuse, to get the correct distance in order to get the wall height, we need the adjacent side in this triangle. 
So, we can do this:
	adj = cos(angle of the ray) * hypotenuse.
But we will face a distorted picture for different angles, this is because we are doing the cosine function for the angle of the ray. We also need to take the player's angle into the account. So in order to fix this bug:
	adj = cos(angle of the ray - angle of the player) * hypotenuse.
This way we get the correct wall height and the fish eye problems are solved.
To find the Height of the wall:
	(8 * 277) / (correct_distance).
Since has all sides equal, in that way 8 is the length of the cube. 277 is our constant here to make the window perfect for us.
For each ray we can do this calculation which can make our own world for the player.
Lastly this is how it would look like.

